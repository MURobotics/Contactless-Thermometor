#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SparkFunMLX90614.h> // SparkFunMLX90614 Arduino library

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define LM35 A0
float temperature = 0;
float value = 0;
float voltage = 0;



//Thermometer Initialization
#define echoPin A2
#define trigPin A1
IRTherm therm; // Create an IRTherm object to interact with throughout

const byte LED_PIN = 8; // Optional LED attached to pin 8 (active low)
boolean checkDistance();
boolean check;
float temp = 0;

boolean checkDistance()
{
  int distance;
  int duration;
  // Clears the trigPin condition
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  // Calculating the distance
  distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)
  // Displays the distance on the Serial Monitor
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");
  if(distance<6){ //Range Finder is cm behind thermometer, so thermometer 2cm from person
    return true;
  }
  else
  {
    return false;
  }
 }
int sendToDisplay2(int temp)
{
  return 1;
}
int turnOnThermometer()
{
  
  // Call therm.read() to read object and ambient temperatures from the sensor.

  
  if (therm.read()) // On success, read() will return 1, on fail 0.
  {
    // Use the object() and ambient() functions to grab the object and ambient
  // temperatures.
  // They'll be floats, calculated out to the unit you set with setUnit().
    Serial.print("Object: " + String(therm.object(), 2));
    Serial.write('°'); // Degree Symbol
    Serial.println("F");
    Serial.print("Ambient: " + String(therm.ambient(), 2));
    Serial.write('°'); // Degree Symbol
    Serial.println("F");
    Serial.println();
  }
  delay(500);
  return (float)((therm.object()));
}


const unsigned char myBitmapMaker [] PROGMEM = {
 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x80, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x80, 0x01, 0x80, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x01, 
  0x80, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x80, 0x01, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x01, 
  0x80, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x01, 
  0x80, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x01, 
  0x80, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x01, 
  0x80, 0x00, 0x07, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x01, 
  0x80, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x01, 
  0x80, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x01, 
  0x80, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x01, 
  0x80, 0x00, 0x07, 0xff, 0xff, 0xef, 0xff, 0xf0, 0x07, 0xff, 0xf3, 0xff, 0xff, 0xe0, 0x00, 0x01, 
  0x80, 0x00, 0x07, 0xff, 0xff, 0xe3, 0xff, 0xf8, 0x1f, 0xff, 0xe3, 0xff, 0xff, 0xe0, 0x00, 0x01, 
  0x80, 0x00, 0x07, 0xff, 0xff, 0xe1, 0xff, 0xfc, 0x3f, 0xff, 0x83, 0xff, 0xff, 0xe0, 0x00, 0x01, 
  0x80, 0x00, 0x07, 0xff, 0xff, 0xe0, 0xff, 0xfe, 0x7f, 0xff, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x01, 
  0x80, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x01, 
  0x80, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xf8, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x01, 
  0x80, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xf0, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x01, 
  0x80, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x01, 
  0x80, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x01, 
  0x80, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0xff, 0xff, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x01, 
  0x80, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xfe, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x01, 
  0x80, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x1f, 0xf8, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x01, 
  0x80, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xf0, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x01, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x80, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x01, 
  0x80, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x01, 
  0x80, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x01, 
  0x80, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x01, 
  0x80, 0x00, 0x07, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf0, 0x00, 0x01, 
  0x80, 0x00, 0x07, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x01, 
  0x80, 0x00, 0x07, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x01, 
  0x80, 0x00, 0x07, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x01, 
  0x80, 0x00, 0x07, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x01, 
  0x80, 0x00, 0x07, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x01, 
  0x80, 0x00, 0x07, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x01, 
  0x80, 0x00, 0x07, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0x01, 
  0x80, 0x00, 0x03, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x01, 
  0x80, 0x00, 0x03, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x01, 
  0x80, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x01, 
  0x80, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x01, 
  0x80, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 
  0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x03, 
  0xe0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x03, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 
  0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char myBitmapMaker1 [] PROGMEM = {
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfc, 0x3f, 0x83, 0xc7, 0xd8, 0x07, 0xdf, 0xe1, 0xe0, 0x13, 0xfc, 0x03, 0xc1, 0xf0, 0x7f, 0xff, 
  0xf8, 0x0f, 0x01, 0xc7, 0xd8, 0x07, 0x8f, 0xc0, 0x60, 0x13, 0xfc, 0x03, 0x80, 0xe0, 0x3f, 0xff, 
  0xf9, 0xcf, 0x39, 0xc3, 0xdf, 0x3f, 0x8f, 0xce, 0x7c, 0xf3, 0xfc, 0xff, 0x3e, 0xcf, 0xbf, 0xff, 
  0xf3, 0xee, 0x7c, 0xc3, 0xdf, 0x3f, 0x8f, 0x9f, 0x7c, 0xf3, 0xfc, 0xff, 0x3f, 0xcf, 0xff, 0xff, 
  0xf3, 0xfe, 0x7c, 0xc9, 0xdf, 0x3f, 0x27, 0x9f, 0xfc, 0xf3, 0xfc, 0xff, 0x1f, 0xc7, 0xff, 0xff, 
  0xf3, 0xfe, 0x7c, 0xcc, 0xdf, 0x3f, 0x27, 0x9f, 0xfc, 0xf3, 0xfc, 0x07, 0x83, 0xe0, 0xff, 0xff, 
  0xf3, 0xfe, 0x7c, 0xcc, 0xdf, 0x3e, 0x73, 0x9f, 0xfc, 0xf3, 0xfc, 0x07, 0xe0, 0xf8, 0x3f, 0xff, 
  0xf3, 0xfe, 0x7c, 0xce, 0x1f, 0x3e, 0x73, 0x9f, 0xfc, 0xf3, 0xfc, 0xff, 0xfc, 0xff, 0x3f, 0xff, 
  0xf3, 0xee, 0x7c, 0xce, 0x1f, 0x3e, 0x03, 0x9f, 0x7c, 0xf3, 0xfc, 0xff, 0xfe, 0x7f, 0x9f, 0xff, 
  0xf9, 0xcf, 0x39, 0xcf, 0x1f, 0x3c, 0x01, 0xce, 0x7c, 0xf3, 0xfc, 0xff, 0x7c, 0xdf, 0x3f, 0xff, 
  0xf8, 0x0f, 0x01, 0xcf, 0x9f, 0x3c, 0xf9, 0xc0, 0x7c, 0xf0, 0x0c, 0x03, 0x00, 0xc0, 0x3f, 0xff, 
  0xfc, 0x3f, 0x83, 0xcf, 0x9f, 0x3d, 0xfd, 0xe1, 0xfc, 0xf0, 0x0c, 0x03, 0x81, 0xe0, 0x7f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xe0, 0x13, 0xe7, 0x00, 0xc0, 0x78, 0xf8, 0xf0, 0x78, 0xf8, 0xc0, 0x00, 0x10, 0x0c, 0x07, 0xff, 
  0xe0, 0x13, 0xe7, 0x00, 0xc0, 0x38, 0xf8, 0xe0, 0x38, 0xf8, 0xc0, 0x00, 0x10, 0x0c, 0x03, 0xff, 
  0xfc, 0xf3, 0xe7, 0x3f, 0xcf, 0x98, 0x78, 0xe7, 0x38, 0x78, 0xcf, 0xfc, 0xf3, 0xfc, 0xf9, 0xff, 
  0xfc, 0xf3, 0xe7, 0x3f, 0xcf, 0x98, 0x70, 0xcf, 0x98, 0x70, 0xcf, 0xfc, 0xf3, 0xfc, 0xf9, 0xff, 
  0xfc, 0xf3, 0xe7, 0x3f, 0xcf, 0x98, 0x70, 0xcf, 0x98, 0x70, 0xcf, 0xfc, 0xf3, 0xfc, 0xf9, 0xff, 
  0xfc, 0xf0, 0x07, 0x01, 0xc0, 0x39, 0x34, 0xcf, 0x99, 0x34, 0xc0, 0x7c, 0xf0, 0x1c, 0x03, 0xff, 
  0xfc, 0xf0, 0x07, 0x01, 0xc0, 0x79, 0x24, 0xcf, 0x99, 0x24, 0xc0, 0x7c, 0xf0, 0x1c, 0x07, 0xff, 
  0xfc, 0xf3, 0xe7, 0x3f, 0xce, 0x79, 0x8c, 0xcf, 0x99, 0x8c, 0xcf, 0xfc, 0xf3, 0xfc, 0xe7, 0xff, 
  0xfc, 0xf3, 0xe7, 0x3f, 0xce, 0x79, 0x8c, 0xcf, 0x99, 0x8c, 0xcf, 0xfc, 0xf3, 0xfc, 0xe7, 0xff, 
  0xfc, 0xf3, 0xe7, 0x3f, 0xcf, 0x39, 0xcc, 0xe7, 0x39, 0xcc, 0xcf, 0xfc, 0xf3, 0xfc, 0xf3, 0xff, 
  0xfc, 0xf3, 0xe7, 0x00, 0xcf, 0x39, 0xdc, 0xe0, 0x39, 0xdc, 0xc0, 0x3c, 0xf0, 0x0c, 0xf3, 0xff, 
  0xfc, 0xf3, 0xe7, 0x00, 0xcf, 0x99, 0xfc, 0xf0, 0x79, 0xfc, 0xc0, 0x3c, 0xf0, 0x0c, 0xf9, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

void setup() {

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for (;;); // Don't proceed, loop forever
  }
  display.clearDisplay();
  // Draw the bitmap:
  
    // drawBitmap(x position, y position, bitmap data, bitmap width, bitmap height, color)
  display.drawBitmap(0, 0, myBitmapMaker, 128, 64, WHITE);
  display.display();
  delay(2000); // Pause for 2 seconds
  // Clear the buffer
  display.clearDisplay();
   
   //drawBitmap(x position, y position, bitmap data, bitmap width, bitmap height, color)(second image) 
  display.drawBitmap(0, 0, myBitmapMaker1, 128, 64, WHITE);
  display.display();
  delay(2000); // Pause for 2 seconds
  // Clear the buffer
  display.clearDisplay();

  pinMode(LM35, INPUT);



  //Thermometer Setup
  // put your setup code here, to run once:
   pinMode(trigPin, OUTPUT); // Sets the trigPin as an OUTPUT
  pinMode(echoPin, INPUT); // Sets the echoPin as an INPUT
  Serial.begin(9600); // Initialize Serial to log output
  therm.begin(); // Initialize thermal IR sensor
  therm.setUnit(TEMP_F); // Set the library's units to Farenheit
  // Alternatively, TEMP_F can be replaced with TEMP_C for Celsius or
  // TEMP_K for Kelvin.
  
 // pinMode(LED_PIN, OUTPUT); // LED pin as output
  Serial.println("Please place your forehead near the sensor");

}

void loop() {
 Serial.println(temp);
  check=checkDistance();
  if (check==true)
  {
    temp=turnOnThermometer();
  }
  //sendToDisplay2(temp);
   displayTemp(temp);
  delay(3000);
 


 
}
void displayTemp(float number) {

  /**value = analogRead(A0);      // sensor output to arduino analog A0 pin
  voltage = value * 0.00488;
  temperature = voltage * 100;
  **/
  display.clearDisplay();
  display.setTextColor(WHITE);
  display.setTextSize(1);
  display.setCursor(20, 10);
  display.print("Temperature");
  display.setCursor(15, 30);
  display.setTextSize(3);
  display.print(number);
  display.print("F");
  display.display();
  delay(1000);
  
}
